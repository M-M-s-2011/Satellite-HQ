[{"/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/index.js":"1","/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/App.js":"2","/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/components/ChatLobby.js":"3","/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/components/Home.js":"4","/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/components/Space.js":"5","/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/components/Game.js":"6"},{"size":197,"mtime":1612116841816,"results":"7","hashOfConfig":"8"},{"size":643,"mtime":1612199630924,"results":"9","hashOfConfig":"8"},{"size":6958,"mtime":1612199630926,"results":"10","hashOfConfig":"8"},{"size":490,"mtime":1612199630931,"results":"11","hashOfConfig":"8"},{"size":344,"mtime":1612199630932,"results":"12","hashOfConfig":"8"},{"size":10991,"mtime":1612215335094,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"mp9kr7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/index.js",[],["29","30"],"/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/App.js",["31"],"import React from \"react\";\nimport { ChatLobby } from \"./components/ChatLobby\";\nimport { Home } from \"./components/Home\";\nimport { Space } from \"./components/Space\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/chat\" component={ChatLobby} />\n          <Route exact path=\"/space/:id\">\n            <Space />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/components/ChatLobby.js",[],"/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/components/Home.js",[],"/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/components/Space.js",[],"/Users/LB/Desktop/CODE/SrPhase/Satellite-HQ/src/components/Game.js",["32"],"import React from \"react\";\nimport Phaser from \"phaser\";\nimport io from \"socket.io-client\";\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    // currently all parts of phaser are declared here and attached to the class\n    // it can't be in state since we don't want the component to render on each change\n    this.game = null;\n    this.spaceId = props.spaceId;\n\n    this.gameInit = this.gameInit.bind(this);\n    this.preload = this.preload.bind(this);\n    this.update = this.update.bind(this);\n    this.create = this.create.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n    this.addOtherPlayers = this.addOtherPlayers.bind(this);\n    this.onNearbyPlayers = this.onNearbyPlayers.bind(this);\n\n    this.map = null;\n    this.cursors = null;\n    this.debugGraphics = null;\n    this.helpText = null;\n    this.player = null;\n    this.showDebug = false;\n    this.currentTileset = 1;\n    this.videoDistanceThreshold = 70;\n    this.inChat = false;\n    this.socket = io({\n      // query === /space/:whatIsWrittenInHere\n      query: {\n        spaceId: this.spaceId,\n      },\n    });\n  }\n\n  gameInit() {\n    // game properties that will be attached to the game instance\n    var config = {\n      type: Phaser.WEBGL,\n      // 100% means the game will take all the page's space\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"#2d2d2d\",\n      parent: \"phaser\",\n      pixelArt: true,\n      physics: {\n        default: \"arcade\",\n        arcade: { gravity: { y: 0 } },\n      },\n      scene: {\n        // gets called by Phaser after init(). it is used to load assets\n        preload: this.preload(),\n        // gets called by Phaser after init() and preload(). it is used to create your game objects\n        create: this.create(),\n        // gets called by Phaser on each step or frame in the game\n        update: this.update(),\n      },\n    };\n    // game instance\n    this.game = new Phaser.Game(config);\n  }\n\n  preload() {\n    // we store the Component's this in self to preserve it (other this will refer to other scopes)\n    const self = this;\n    return function () {\n      // images ment to be used for the game are loaded here\n      this.load.image(\"tiles\", \"/assets/catastrophi_tiles_16.png\");\n      this.load.image(\"tiles_red\", \"/assets/catastrophi_tiles_16_red.png\");\n      this.load.image(\"tiles_blue\", \"/assets/catastrophi_tiles_16_blue.png\");\n      this.load.tilemapCSV(\"map\", \"/assets/catastrophi_level2.csv\");\n      // this can be customized to be our user emoji\n      this.load.spritesheet(\"player\", \"/assets/spaceman.png\", {\n        frameWidth: 16,\n        frameHeight: 16,\n      });\n    };\n  }\n\n  addPlayer(scene, player, layer) {\n    // function responsable of creating the multiplayer feature\n    this.player = scene.physics.add\n      .sprite(player.x, player.y, \"player\", 1)\n      .setScale(2);\n    this.player.setSize(10, 10, false);\n    scene.cameras.main.startFollow(this.player);\n    scene.physics.add.collider(this.player, layer);\n  }\n\n  addOtherPlayers(scene, player, layer) {\n    // function responsable of creating the multiplayer feature\n    const newPlayer = scene.physics.add\n      .sprite(player.x, player.y, \"player\", 1)\n      .setScale(2);\n    newPlayer.setSize(10, 10, false);\n    scene.physics.add.collider(newPlayer, layer);\n    newPlayer.playerId = player.playerId;\n    scene.otherPlayers.add(newPlayer);\n  }\n\n  onNearbyPlayers(player, others) {\n    // https://www.varsitytutors.com/hotmath/hotmath_help/topics/distance-formula#:~:text=The%20distance%20formula%20is%20really,AB%20as%20its%20hypotenuse.&text=Since%20AC%20is%20a,2%E2%88%92x1)%7C%20.\n    function pytagoras(x1, y1, x2, y2) {\n      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n    }\n\n    others.getChildren().forEach((otherPlayer) => {\n      const distance = pytagoras(\n        player.x,\n        player.y,\n        otherPlayer.x,\n        otherPlayer.y\n      );\n      if (distance <= this.videoDistanceThreshold) {\n        this.helpText.setText(\n          `Player ${otherPlayer.playerId} is ${Math.floor(\n            distance\n          )} pixels away!`\n        );\n        if (!this.inChat) {\n          this.inChat = true;\n          this.socket.emit(\"join\", \"MyRoom\");\n        }\n        //Add handler for joining video chat\n        //Container\n        // TODO: Trigger chatroom between players here\n      } else {\n        // TODO: Remove chatroom between players here\n        this.helpText.setText(\"\");\n      }\n    });\n  }\n\n  create() {\n    const self = this;\n\n    function updateHelpText() {\n      self.helpText.setText(\n        \"WASD keys to move.\" +\n          \"\\nPress 1/2/3 to change the tileset texture.\" +\n          \"\\nCurrent texture: \" +\n          self.currentTileset\n      );\n    }\n\n    return function (data) {\n      function drawDebug() {\n        self.debugGraphics.clear();\n\n        if (self.showDebug) {\n          // pass in null for any of the style options to disable drawing that component\n          self.map.renderDebug(self.debugGraphics, {\n            tileColor: null, // Non-colliding tiles\n            collidingTileColor: new Phaser.Display.Color(243, 134, 48, 200), // Colliding tiles\n            faceColor: new Phaser.Display.Color(40, 39, 37, 255), // Colliding face edges\n          });\n        }\n\n        updateHelpText();\n      }\n\n      // loading a CSV map to give the tileset depth and work with collision\n      self.map = this.make.tilemap({\n        key: \"map\",\n        tileWidth: 16,\n        tileHeight: 16,\n      });\n      var tileset = self.map.addTilesetImage(\"tiles_red\");\n      var layer = self.map.createLayer(0, tileset, 0, 0);\n      layer.setScale(2);\n\n      // add more players to the same group\n      this.otherPlayers = this.physics.add.group();\n\n      // this.socket = io({\n      //   // query === /space/:whatIsWrittenInHere\n      //   query: {\n      //     spaceId: self.spaceId,\n      //   },\n      // });\n      console.log(\"self.socket\", self.socket);\n      this.socket = self.socket;\n      this.socket.on(\"currentPlayers\", (players) => {\n        Object.keys(players).forEach((id) => {\n          if (players[id].playerId === this.socket.id) {\n            self.addPlayer(this, players[id], layer);\n          } else {\n            self.addOtherPlayers(this, players[id], layer);\n          }\n        });\n      });\n      // see line 45 on server.js and addOtherPlayers class method\n      this.socket.on(\"newPlayer\", (playerInfo) => {\n        self.addOtherPlayers(this, playerInfo, layer);\n      });\n      // see line 50 on server.js\n      this.socket.on(\"userDisconnected\", (playerId) => {\n        this.otherPlayers.getChildren().forEach((otherPlayer) => {\n          if (playerId === otherPlayer.playerId) {\n            otherPlayer.destroy();\n          }\n        });\n      });\n      // see line 60 in server.js\n      this.socket.on(\"playerMoved\", (playerInfo) => {\n        this.otherPlayers.getChildren().forEach((otherPlayer) => {\n          if (playerInfo.playerId === otherPlayer.playerId) {\n            otherPlayer.setPosition(playerInfo.x, playerInfo.y);\n          }\n        });\n        self.onNearbyPlayers(self.player, this.otherPlayers);\n      });\n      //SAFEWORD CANTALOUPE\n      this.socket.on(\"created\", function () {\n        let videoChatRoom = document.getElementById(\"video-chat-room\");\n        let userVideo = document.getElementById(\"user-video\");\n        navigator.mediaDevices\n          .getUserMedia({\n            audio: false,\n            video: { width: 200, height: 200 },\n          })\n          .then(function (stream) {\n            videoChatRoom.style = \"display:flex\";\n            userVideo.srcObject = stream;\n            userVideo.onloadedmetadata = function (e) {\n              userVideo.play();\n            };\n          })\n          .catch(function (err) {\n            alert(\"Couldn't access media\");\n          });\n      });\n\n      self.map.setCollisionBetween(54, 83);\n\n      // with keys 1 2 and 3 titlesets change image\n      this.input.keyboard.on(\n        \"keydown-ONE\",\n        function (event) {\n          var texture = this.sys.textures.get(\"tiles_red\");\n          self.currentTileset = 1;\n          tileset.setImage(texture);\n          updateHelpText();\n        },\n        this\n      );\n\n      this.input.keyboard.on(\n        \"keydown-TWO\",\n        function (event) {\n          var texture = this.sys.textures.get(\"tiles_blue\");\n          self.currentTileset = 2;\n          tileset.setImage(texture);\n          updateHelpText();\n        },\n        this\n      );\n\n      this.input.keyboard.on(\n        \"keydown-THREE\",\n        function (event) {\n          var texture = this.sys.textures.get(\"tiles\");\n          self.currentTileset = 3;\n          tileset.setImage(texture);\n          updateHelpText();\n        },\n        this\n      );\n\n      // set the camera bounds to be the size of the image\n      this.cameras.main.setBounds(\n        0,\n        0,\n        self.map.widthInPixels,\n        self.map.heightInPixels\n      );\n\n      self.debugGraphics = this.add.graphics();\n\n      this.input.keyboard.on(\"down_67\", function (event) {\n        self.showDebug = !self.showDebug;\n        drawDebug();\n      });\n\n      // user will move with WASD keys\n      self.cursors = this.input.keyboard.addKeys({\n        up: Phaser.Input.Keyboard.KeyCodes.W,\n        down: Phaser.Input.Keyboard.KeyCodes.S,\n        left: Phaser.Input.Keyboard.KeyCodes.A,\n        right: Phaser.Input.Keyboard.KeyCodes.D,\n      });\n\n      self.helpText = this.add.text(16, 16, \"\", {\n        fontSize: \"20px\",\n        fill: \"#ffffff\",\n      });\n      self.helpText.setScrollFactor(0);\n      updateHelpText();\n    };\n  }\n\n  update() {\n    const self = this;\n    return function (time, delta) {\n      const updatePlayer = () => {\n        self.player.body.setVelocity(0);\n\n        // for triggering horizontal movement\n        if (self.cursors.left.isDown) {\n          self.player.body.setVelocityX(-200);\n        } else if (self.cursors.right.isDown) {\n          self.player.body.setVelocityX(200);\n        }\n        // for triggering vertical movement\n        if (self.cursors.up.isDown) {\n          self.player.body.setVelocityY(-200);\n        } else if (self.cursors.down.isDown) {\n          self.player.body.setVelocityY(200);\n        }\n\n        // emit our position to the socket.io server\n        const { x, y } = self.player;\n        if (self.player.oldPosition) {\n          if (\n            x !== self.player.oldPosition.x ||\n            y !== self.player.oldPosition.y\n          ) {\n            this.socket.emit(\"playerMovement\", {\n              x,\n              y,\n            });\n\n            self.onNearbyPlayers(self.player, this.otherPlayers);\n          }\n        }\n        self.player.oldPosition = {\n          x,\n          y,\n        };\n      };\n\n      self.player && updatePlayer();\n    };\n  }\n\n  componentDidMount() {\n    // initiating the game once\n    this.gameInit();\n  }\n\n  render() {\n    // phaser target element\n    return <div id=\"phaser\"></div>;\n  }\n}\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":5,"column":50,"nodeType":"39","messageId":"40","endLine":5,"endColumn":54},{"ruleId":"37","severity":1,"message":"41","line":67,"column":11,"nodeType":"39","messageId":"40","endLine":67,"endColumn":15},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'self' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]